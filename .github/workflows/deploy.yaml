name: Deploy BI Lambda Function
on:
  workflow_dispatch:
    inputs:
      path:
        description: 'generate-hourly-ranking, generate-hourly-kor-ranking, generate-daily-ranking, generate-daily-daum-portal-ranking, generate-weekly-ranking, generate-steady-seller, generate-today-match'
        required: true
        default: 'generate-hourly-ranking'
      region:
        description: 'all, kor, twn, tha'
        required: true
        default: 'all'

jobs:
  deploy:
    name: lambda deploy
    runs-on: ubuntu-20.04
    env:
      working-directory: ./${{ github.event.inputs.path }}
    strategy:
      matrix:
        node-version: [ 12.x ]
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: npm install
        working-directory: ${{ env.working-directory }}
        run: npm ci

      - name: Extract current git branch and tag name
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "##[set-output name=tag;]$(echo ${GITHUB_REF#refs/tags/})"
        id: extract_branch

      - name: serverless deploy (qa, production)
        run: |
          branchName=${{ steps.extract_branch.outputs.branch}}
          stage=prod
          awsRegion='ap-northeast-2'
          configFile=serverless-tha.yml
          if [[ "$branchName" =~ 'release' ]]
          then
              stage=qa
          fi

          region="${{ github.event.inputs.region }}"
          if [[ $region == 'all' ]]
          then
            region="kor tha twn"
          fi

          for var in $region
          do
            echo "Deploy ${{ github.event.inputs.path }} - stage = $stage, region = $var"
            if [ $var == 'tha' ]
            then
                configFile=serverless-tha.yml
                awsRegion=${{ secrets.AWS_REGION_SINGAPOLE }}
                aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID_THA }} --profile deploy
                aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY_THA }} --profile deploy
            elif [ $var == 'twn' ]
            then
                configFile=serverless-twn.yml
                awsRegion=${{ secrets.AWS_REGION_SINGAPOLE }}
                aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID_TWN }} --profile deploy
                aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY_TWN }} --profile deploy
            elif [ $var == 'kor' ]
            then
                configFile=serverless-kor.yml
                aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID_KOR }} --profile deploy
                aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY_KOR }} --profile deploy
            fi

            if [ $var == 'tha' ] || [ $var == 'twn' ] || [ $var == 'kor' ]
            then
                npm install -g serverless
                echo "serverless deploy --stage $stage --region $awsRegion --aws-profile deploy -c $configFile"
                serverless deploy --stage $stage --region $awsRegion --aws-profile deploy -c $configFile
            fi

          done
        working-directory: ${{ env.working-directory }}
        if: ${{ contains(steps.extract_branch.outputs.branch, 'release/') || contains(github.ref, 'refs/tags/') }}

#      - name: Slack Notification
#        uses: 8398a7/action-slack@v3.8.0
#        with:
#          status: ${{ job.status }}
#          fields: repo,author,eventName,workflow,ref
#          channel: '#kw-backend-notification'
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#        if: always()

