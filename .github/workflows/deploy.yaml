name: Deploy Sample Lambda
on:
  workflow_dispatch:
    inputs:
      path:
        description: 'lambda-sample'
        required: true
        default: 'lambda-sample'
      region:
        description: 'all, kor, twn, tha'
        required: true
        default: 'all'

jobs:
  deploy:
    name: lambda deploy
    runs-on: ubuntu-20.04
    env:
      working-directory: ./${{ github.event.inputs.path }}
    strategy:
      matrix:
        node-version: [ 14.x ]
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: npm install
        working-directory: ${{ env.working-directory }}
        run: npm ci

      - name: Extract current git branch and tag name
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "##[set-output name=tag;]$(echo ${GITHUB_REF#refs/tags/})"
        id: extract_branch

      - name: serverless deploy (sandbox case)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "serverless deploy --stage sandbox"
          npm install -g serverless
          serverless deploy --stage sandbox
        working-directory: ${{ env.working-directory }}
        if: contains(steps.extract_branch.outputs.branch, 'sandbox')

      - name: serverless deploy Taipei (qa, production)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_THA }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_THA }}
          AWS_REGION: ${{ secrets.AWS_REGION_SINGAPOLE }}
        run: |
          branchName=${{ steps.extract_branch.outputs.branch}}
          stage=qa
          if [[ $branchName =~ 'refs/tags' ]]
          then
              stage=prod
          fi

          echo "Deploy ${{ github.event.inputs.path }} - Taipei"
          npm install -g serverless
          echo "LOCALE=tha serverless deploy --verbose --stage $stage"
          LOCALE=tha serverless deploy --verbose --stage $stage
        working-directory: ${{ env.working-directory }}
        if: ${{ (contains(steps.extract_branch.outputs.branch, 'release/') || contains(steps.extract_branch.outputs.branch, 'master')) && (contains(github.event.inputs.region, 'tha') || contains(github.event.inputs.region, 'all')) }}

      - name: serverless deploy Taiwan (qa, production)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_TWN }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_TWN }}
          AWS_REGION: ${{ secrets.AWS_REGION_SINGAPOLE }}
        run: |
          branchName=${{ steps.extract_branch.outputs.branch}}
          stage=qa
          if [[ $branchName =~ 'refs/tags' ]]
          then
              stage=prod
          fi

          echo "Deploy ${{ github.event.inputs.path }} - Taiwan"
          npm install -g serverless
          echo "LOCALE=twn serverless deploy --verbose --stage $stage"
          LOCALE=twn serverless deploy --verbose --stage $stage
        working-directory: ${{ env.working-directory }}
        if: ${{ (contains(steps.extract_branch.outputs.branch, 'release/') || contains(steps.extract_branch.outputs.branch, 'tags/')) && (contains(github.event.inputs.region, 'twn') || contains(github.event.inputs.region, 'all')) }}

      - name: serverless deploy Korea (qa, production)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_KOR }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_KOR }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          branchName=${{ steps.extract_branch.outputs.branch}}
          stage=qa
          if [[ $branchName =~ 'refs/tags' ]]
          then
              stage=prod
          fi

          echo "Deploy ${{ github.event.inputs.path }} - Korea"
          npm install -g serverless
          echo "LOCALE=kor serverless deploy --verbose --stage $stage"
          LOCALE=kor serverless deploy --verbose --stage $stage
        working-directory: ${{ env.working-directory }}
        if: ${{ (contains(steps.extract_branch.outputs.branch, 'release/') || contains(steps.extract_branch.outputs.branch, 'tags/')) && (contains(github.event.inputs.region, 'kor') || contains(github.event.inputs.region, 'all')) }}

#      - name: Slack Notification
#        uses: 8398a7/action-slack@v3.8.0
#        with:
#          status: ${{ job.status }}
#          fields: repo,author,eventName,workflow,ref
#          channel: '#kw-backend-notification'
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#        if: always()
